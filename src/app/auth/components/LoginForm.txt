
'use client'
import { useForm, SubmitHandler } from "react-hook-form"
import React, { useState } from 'react';
import {
  AtSymbolIcon,
  KeyIcon,
  ExclamationCircleIcon,
} from '@heroicons/react/24/outline';
import { ArrowRightIcon } from '@heroicons/react/20/solid';
import apiAuth from "../model/apiAuth";


type FormData = {
  email: string,
  password: string,
};
const LoginForm = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>()
  const [ showError, setShowError ] = useState(false);
  console.log(errors)
  const onLoginUser = async ({email, password}: FormData ) => {
      setShowError(false);
      console.log(email, password);
      const login = { email, password }
      try{
        const response = await apiAuth.login(login);
        console.log(response)
      } catch (error){
        console.log(error);
        setShowError(true)
      }
      
      
  } 
  return (
    <form className="space-y-3" 
                onSubmit={ handleSubmit(onLoginUser) } noValidate>
            <div className="flex-1 rounded-lg bg-gray-50 px-6 pb-4 pt-8">
                <h1 className={` mb-3 text-2xl`}>
                Please log in to continue.
                </h1>
                <div className="w-full">
                <div>
                    <label
                    className="mb-3 mt-5 block text-xs font-medium text-gray-900"
                    htmlFor="email"
                    >
                    Email
                    </label>
                    <div className="relative">
                    <input
                        className="peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500"
                        id="email" type="email" placeholder="Enter your email address"
                        { ...register('email', {
                            required: 'email es obligatorio',
                            // validate: (val) => validations.isEmail(val)
                            // validate: validations.isEmail
                        })}
                        aria-invalid={!!errors.email}
                    />
                    <AtSymbolIcon className="pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900" />
                    </div>
                </div>
                <div className="mt-4">
                    <label
                    className="mb-3 mt-5 block text-xs font-medium text-gray-900"
                    htmlFor="password"
                    >
                    Password
                    </label>
                    <div className="relative">
                    <input
                        className="peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500"
                        id="password" type="password" placeholder="Enter password" required
                        minLength={6}
                        { ...register('password', {
                            required:'Password es requerido',
                            minLength: { value: 6, message: 'Minimo 6 caracteres'}
                        })}
                        aria-invalid={!!errors.password}
                    />
                    <KeyIcon className="pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900" />
                    </div>
                </div>
                </div>
                <LoginButton />
                <div className="flex h-8 items-end space-x-1">
                {/* Add form errors here */}
                </div>
            </div>
            </form>
  );
}

function LoginButton() {
  return (

    <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
         Log in <ArrowRightIcon className="ml-auto h-5 w-5 text-gray-50" />
    </button>
  );
}


export default LoginForm
